---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: ${NAMESPACE}
  labels:
    app: prometheus-server-api
spec:
  selector:
    matchLabels:
      app: prometheus-server-api
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: prometheus-server-api
    spec:
      imagePullSecrets:
        - name: pipeline-docker-registry
      containers:
      - name: prometheus-server
        image: ${IMAGE}
        imagePullPolicy: Always
        volumeMounts:
        - name: config-vol
          mountPath: /etc/prometheus/prometheus.yml
        ports:
        - containerPort: ${PORT_INT}
          protocol: TCP
      volumes:
      - name: config-vol
        configMap:
          name: bzn-smo-infra-prometheus
          items:
            - key: conf.yml
              path: conf.yml                
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus-server-service
  namespace: ${NAMESPACE}
spec:
  selector:
    app: prometheus-server-api
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: ${PORT_INT}

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ${NAMESPACE}
  name: prometheus-server-ingress
  annotations:
    allow.http: "true"
spec:
  rules:
    - host: $DNS
      http:
        paths:
          - path: /
            backend:
              serviceName: prometheus-server-service
              servicePort: 80