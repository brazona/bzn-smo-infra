version: '3.0'

services:
  jaeger:
    container_name: ${JAEGER_CONTAINER_NAME}
    hostname: ${JAEGER_CONTAINER_NAME}
    image: ${JAEGER_IMAGE}
    networks:
      - bzn-network
    restart: always
    extra_hosts:
    - "host.docker.internal:host-gateway"  
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      #- PROMETHEUS_SERVER_URL=http://${PROMETHEUS_CONTAINER_NAME}:${PROMETHEUS_PORT_INT}
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "${JAEGER_PORT_EXT}:${JAEGER_PORT_INT}"      
    volumes:
      - "./jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
  otel_collector:
    container_name: ${OTEL_CONTAINER_NAME}
    hostname: ${OTEL_CONTAINER_NAME}
    image: ${OTEL_IMAGE}  
    restart: always
    extra_hosts:
    - "host.docker.internal:host-gateway"    
    networks:
      bzn-network:
        # This is the host name used in Prometheus scrape configuration.
        aliases: [spm_metrics_source]
    volumes:
      - ./jaeger/otel-collector-config-connector.yml:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    depends_on:
      - jaeger
    ports:
      #- "8889:8889"
      - "${OTEL_PORT_EXT}:${OTEL_PORT_INT}" 
  microsim:
    container_name: ${MICROSIM_CONTAINER_NAME}
    hostname: ${MICROSIM_CONTAINER_NAME}
    image: ${MICROSIM_IMAGE}  
    restart: always
    extra_hosts:
    - "host.docker.internal:host-gateway" 
    networks:
      - bzn-network
    command: "-d 24h -s 500ms"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4318
      #- OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_CONTAINER_NAME}:${OTEL_PORT_INT}
      - OTEL_EXPORTER_OTLP_INSECURE=true
    depends_on:
      - otel_collector

  hotrod:
    container_name: ${JAEGER_EXEMPLO_CONTAINER_NAME}
    hostname: ${JAEGER_EXEMPLO_CONTAINER_NAME}
    image: ${JAEGER_EXEMPLO_IMAGE}  
    ports:
      - "${JAEGER_EXEMPLO_PORT_EXT}:${JAEGER_EXEMPLO_PORT_INT}"            
    command: ["all"]
    environment:
       - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger-local:4318
      #- OTEL_EXPORTER_OTLP_ENDPOINT=http://${JAEGER_CONTAINER_NAME}:${JAEGER_PORT_INT}
    networks:
      - bzn-network
    depends_on:
      - jaeger        
  prometheus:
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    hostname: ${PROMETHEUS_CONTAINER_NAME}
    image: ${PROMETHEUS_IMAGE}  
    networks:
      - bzn-network
    restart: always
    volumes:
      - "./prometheus/conf.yml:/etc/prometheus/prometheus.yml"
    ports:
      # - "9090:9090"
      - "${PROMETHEUS_PORT_EXT}:${PROMETHEUS_PORT_INT}" 
  grafana:
    container_name: ${GRAFANA_CONTAINER_NAME}
    hostname: ${GRAFANA_CONTAINER_NAME}
    image: ${GRAFANA_IMAGE}  
    networks:
      - bzn-network
    restart: always
    ports:
      # - "3000:3000"
     - "${GRAFANA_PORT_EXT}:${GRAFANA_PORT_INT}" 
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD} 
    depends_on:
      - prometheus
networks:
  bzn-network:
    external: true
volumes:
  vol-jaeger: {}     